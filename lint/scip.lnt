//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
//*                                                                           */
//*                  This file is part of the program and library             */
//*         SCIP --- Solving Constraint Integer Programs                      */
//*                                                                           */
//*    Copyright (C) 2002-2010 Konrad-Zuse-Zentrum                            */
//*                            fuer Informationstechnik Berlin                */
//*                                                                           */
//*  SCIP is distributed under the terms of the ZIB Academic License.         */
//*                                                                           */
//*  You should have received a copy of the ZIB Academic License              */
//*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      */
//*                                                                           */
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

-passes(1)
// esoteric size settings to find erros.
//-si4    // int's are 4 bytes
//-sl6    // long's are 6 bytes
//-sp8    // ptr's are 8 bytes

-fdc       // do not Distinguish plain Char as a unique type.
           // i.e. char is either signed char or unsigned char
           
            // while processing library headers
-wlib(1)    // sets the warning level within library headers to 1
            // (no warnings, just syntax errors).  Comment out if you
            // are actually linting library headers.  This
            // option makes obsolete options of the form -elib(aXYZ) where
            // XYZ >= 400 which may be retained for historical reasons.

-i./lint/posix
-i./lint/cpp
//-i/usr/include

+libh(cplex.h)
+fll


//  The following functions exhibit variable return modes.
//  That is, they may equally-usefully be called for a value
//  as called just for their effects.  Accordingly we inhibit
//  Warning 534 for these functions.
//  Feel free to add to or subtract from this list.

-esym(534,close,creat,fclose,fflush,fprintf,vfprintf,fputc,fgets)
-esym(534,fputs,fscanf,fseek,fwrite,lseek,memcpy,memmove,memset)
-esym(534,printf,vprintf,puts,scanf,sprintf,snprintf,sscanf,strcat,strcpy)
-esym(534,strncat,strncpy,unlink,write)
-esym(534,free_history_entry)
-esym(534,SCIPfclose,SCIPfflush,SCIPfprintf,SCIPfputc,SCIPfputs,SCIPfseek,SCIPfwrite)

-function(exit,__assertfail)

-emacro(506,debugMessage) // Constant value Boolean
-emacro(681,debugMessage) // Loop is not entered
-emacro(506,debugPrintf) // Constant value Boolean
-emacro(681,debugPrintf) // Loop is not entered
-emacro(506,SCIPdebugMessage) // Constant value Boolean
-emacro(681,SCIPdebugMessage) // Loop is not entered
-emacro(506,SCIPdebugPrintf) // Constant value Boolean
-emacro(681,SCIPdebugPrintf) // Loop is not entered
-emacro(506,SCIPdebugCheckRow) // Constant value Boolean
-emacro(506,SCIPdebugCheckImplic) // Constant value Boolean
-emacro(506,assert)       // Constant value Boolean
-emacro(685,BMSallocMemoryArray) // Relational operator always evaluates to 'false'
-emacro(685,BMSreallocMemoryArray) // Relational operator always evaluates to 'false'
-emacro(685,BMSallocMemoryArrayCPP) // Relational operator always evaluates to 'false'
-emacro(685,BMSallocClearMemoryArray) // Relational operator always evaluates to 'false'
-emacro(685,BMSallocBlockMemoryArray) // Relational operator always evaluates to 'false'
-emacro(685,BMSreallocBlockMemoryArray) // Relational operator always evaluates to 'false'

-esym(578,clock)          // Declaration of symbol hides symbol
-esym(578,scip)           // Declaration of symbol hides symbol
-esym(715,scip)           // Symbol not referenced
-esym(528,consdataPrint)  // Symbol not referenced
-esym(1712,Obj*)          // default constructor not defined for class

-e537  // Repeated include file
-e631  // tag defined differently
-e717  // do ... while(0);
-e730  // Boolean argument to function
-e731  // Boolean argument to equal/not equal
-e737  // Loss of sign in promotion from int to unsigned int
-e767  // macro was defined differently in another module
-e770  // tag defined identically
-e773  // Expression-like macro not parenthesized
-e793  // ANSI limit of 31 'function parameters' exceeded / ANSI limit of 8 '#include levels' exceeded
-e834  // Operator followed by operator ist confusing
-e655  // bit-wise operation uses (compatible) enum's

// temporary
-e818  // Pointer parameter could be declared as pointing to const
-e801  // Use of goto is deprecated
-e740  // Unusual pointer cast (incompatible indirect types)

//-e506  // Constant value Boolean
//-e534  // Ignoring return value of function
//-e713  // loss of precision
//-e715  // Symbol not referenced
//-e774  // Boolean within 'if' always evaluates to False
//-e777  // Testing floats for equality
//-e759  // header declaration for symbol could be moved from header to module
//-e765  // external could be made static
//-e788  // enum constant not used within defaulted switch
//-e1065 // Symbol ... not declared as "C" conflicts with ...
