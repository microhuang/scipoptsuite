#!groovy

gitlabCommitStatus(name: 'cmake compilation') {
    node ('ubuntu18') {
        timeout(1) {
            stage('Clean') {
                cleanWs() // clean workspace
            }
        }
        stage('Merge') {
            checkout changelog: false,
                     poll: false,
                     scm: [
                         $class: 'GitSCM',
                         branches: [[name: 'origin/${gitlabSourceBranch}']],
                         doGenerateSubmoduleConfigurations: false,
                         extensions: [[
                             $class: 'PreBuildMerge',
                             options: [
                                      mergeRemote: 'origin',
                                      mergeTarget: '${gitlabTargetBranch}'
                             ]
                         ]],
                         submoduleCfg: [],
                         userRemoteConfigs: [[
                             credentialsId: '6b0cae3e-9aa0-4206-88ac-4362f76f0111',
                         url: 'git@git.zib.de:integer/scip.git']]
                     ]
        }

        stage('Test') {
            def paramjobs = [:]

                String[] buildtypes = ["Release", "Debug"]
                String[] compilers = ["gnu", "clang", "intel"]
                String[] CXXONLY = ["off", "on"]
                for(i = 0; i < buildtypes.size(); i += 1) {
                    def bt = buildtypes[i]

                        for(j = 0; j < compilers.size(); j += 1) {
                            def c = compilers[j]

                                for(k = 0; k < CXXONLY.size(); k += 1) {
                                    def cpp = CXXONLY[k]

                                        paramjobs["Test ${bt} ${c} ${cpp}"] = {
                                            build job: 'template_SCIP_cmake_mergerequest',
                                            parameters: [
                                                string(name: 'buildtype', value: "${bt}"),
                                            string(name: 'compiler', value: "${c}"),
                                            string(name: 'cpp', value: "${cpp}")
                                            ],
                                            propagate: true,
                                            wait: true
                                        }
                                }
                        }
                }
            parallel paramjobs
        }
    }
}
