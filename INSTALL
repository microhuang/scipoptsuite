* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                           *
*                  This file is part of the program and library             *
*         SCIP --- Solving Constraint Integer Programs                      *
*                                                                           *
*    Copyright (C) 2002-2012 Konrad-Zuse-Zentrum                            *
*                            fuer Informationstechnik Berlin                *
*                                                                           *
*  SCIP is distributed under the terms of the ZIB Academic License.         *
*                                                                           *
*  You should have received a copy of the ZIB Academic License              *
*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      *
*                                                                           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

In most cases (LINUX and MAC) it is quite easy to compile and install
SCIP. Therefore, reading the section "Brief installation description"
should usually be enough. If this is not the case you find "Detailed
installation description" below as well as some examples.

Content
*******

I    Brief installation description:
II   Detailed installation description:
III  Examples


I Brief installation description
********************************

The easiest way to install SCIP is to use the ZIB Optimization Suite which
contains SCIP, SoPlex, and ZIMPL. For that we refer to the INSTALL file of
the ZIB Optimization Suite (In case of the ZIB Optimization Suite, there is
not need to specify any directories, the compiling process is fully
automated).

Compiling SCIP directly can be done as follows:

1) unpack the tarball "tar xvf scip-x.y.z.tgz"
2) change into the directory "cd scip-x.y.z"
3) start compiling SCIP "make"
4) (optional) install the header, libraries, and binary "make install INSTALLDIR="/usr/local/"

On your first compilation you will be asked for some soft-link targets,
depending on the LP solver you want to use. Usually, SCIP needs the
following information
 (a) the directory where the include files of the LP solver lie
 (b) the library file(s) "lib*.a" or/and "lib*.so"

Beside that SCIP needs the some soft-link targets, for ZIMPL lie
 (a) the directory where the include files of ZIMPL
 (b) the library file(s) "lib*.a" or/and "lib*.so"

You will need either the .a or the .so files and can skip the others by
just pressing return.

II Detailed installation description
************************************

In the following, some of the names depend on your machine and your
compilation settings:

- $(OSTYPE):  the operating system
              the string returned by "uname -s" in lower case with the following
              replacements:
              - "cygwin*" is replaced by only "cygwin"
              - "irix??" is replaced by only "irix"
              - "windows*" is replaced by only "windows"
              - "mingw*" is replaced by only "mingw"

- $(ARCH):    the architecture
              the string returned by "uname -m", modified by the following
              rules to subsume some architectures:
               - "sun??" is replaced by "sparc"
               - "i?86", "i86pc", and "[0-9]86" are replaced by "x86"
               - "amd64" is replaced by "x86_64"
               - "IP??" is replaced by "mips"
               - "9000????" is replaced by "hppa"
               - "Power Macintosh" is replaced by "ppc"
               - "00??????????" is replaced by "pwr4"

- $(COMP):    the compiler
              "gnu", "intel", "compaq", "sun", "insure", ... (see make/ directory)

- $(OPT):     the optimization level of compilation
              "dbg", "opt", or "prf" 

- $(LPS):     the LP solver to use
              "spx", "clp", "cpx", "xprs", "msk", "grb", "qso", "none"

- $(EXPRINT): the expressions interpreter (code that computes derivatives and hessians) to use
              "none", "cppad"

For example, if you want to install SCIP on a Linux system with a x86 processor
using the gnu compiler in debug mode, using Soplex version >= 1.4.0 as LP solver,
and no expressions interpreter you would have the following names:
- $(OSTYPE)  = linux
- $(ARCH)    = x86
- $(COMP)    = gnu
- $(OPT)     = dbg
- $(LPS)     = spx
- $(EXPRINT) = none

-----------------------------------------------------------------------------

Here is what you have to do to get SCIP running:

1. Compile the library and the solver program:
   In your SCIP main directory, enter "make [options]" with the following options:
   - "OPT=opt"         to use optimized compilation mode (default)
   - "OPT=dbg"         to use debug compilation mode
   - "OPT=prf"         to use performance analysis compilation mode
   - "OPT=opt-gccold"  to use optimized compilation mode and gnu gcc compiler version less than 4.2

   - "LPS=spx"         to use SOPLEX Version >= 1.4.0 as LP solver (default)
   - "LPS=spx132"      to use SOPLEX Version 1.3.2 as LP solver
   - "LPS=cpx"         to use CPLEX as LP solver
   - "LPS=xprs"        to use XPRESS as LP solver
   - "LPS=msk"         to use MOSEK as LP solver
   - "LPS=clp"         to use CLP as LP solver
   - "LPS=grb"         to use Gurobi as LP solver
   - "LPS=qso"         to use QSopt as LP solver
   - "LPS=none"        to use no LP solver

   - "COMP=gnu"        to use GNU c/c++ compiler (default)
   - other compilers are available (see make/ directory)

   - "ZLIB=true"       to use zlib and enable reading of compressed files (default)
   - "ZLIB=false"      disable zlib usage

   - "READLINE=true"   to enable readline library for interactive shell (default)
   - "READLINE=false"  to disable readline library

   - "ZIMPL=true"      to enable ZIMPL file reader (default; needs ZIMPL, ZLIB, and GMP to be installed, see 2. (g))
   - "ZIMPL=false"     to disable ZIMPL file reader

   - "GMP=true"        to use GMP library for exact counting
   - "GMP=false"       disable GMP usage; Note that GMP=false is not compatible with ZIMP=true since ZIMPL needs the GMP library
   - "GMP=auto"        to automaticaly link the GMP library in case ZIMPL is enabled (default)

   - "IPOPT=true"      to enable IPOPT interface (needs IPOPT)
   - "IPOPT=false"     to disable IPOPT interface (default)

   - "EXPRINT=cppad"   to use CppAD as expressions interpreter
   - "EXPRINT=none"    to use no expressions interpreter (default)

   - "VERBOSE=false"   to suppress display of compiler and linker invocations (default)
   - "VERBOSE=true"    to display compiler and linker invocations

   - "SHARED=false"    to suppress shared libraries
   - "SHARED=true"     to create shared libraries

   On some machines, you should use gmake instead of make.

   On your first compilation you will be asked for some soft-link targets, depending on the
   LP solver you want to use. Usually, SCIP needs the following information
     (a) the directory where the include files of the LP solver
     (b) the library file(s) "lib*.a" or/and "lib*.so"
   You will need either the .a or the .so files and can skip the others by just pressing return.

2. Installing SCIP
   After compiling you can install the headers, the libraries, and the binay. Therefore you use the command:

   make install INSATLLDIR=<dirctory>

   - "INSTALLDIR="     directory as install directory (dafault) 
   - "INSTALLDIR=/usr/local" 
                       to install the headers (/usr/local/include/), the libraries (/usr/local/lib/),
                        and binary (/usr/loacl/bin/) in the directory /usr/local

   For un-installing SCIP there exist the target "uninstall" which can be used in the same way as "install".

III Examples
************

   Example 1 (defaults: SoPlex, with ZIMPL support):
   =================================================

   Typing "make" uses SoPlex as LP solver and includes support for the modeling language ZIMPL.
   You will be asked the following questions on the first call to "make" (example answers are already given):

---
make[1]: Entering directory `/sw/scip'

** creating softlinks: LPS=spx OSTYPE=linux ARCH=x86 COMP=gnu SUFFIX= ZIMPL=true ZIMPLOPT=opt IPOPT=false IPOPTOPT=opt EXPRINT=none

** creating directory "lib/zimplinc"
** missing soft-link "lib/spxinc"
** enter soft-link target file or directory for "lib/spxinc" (return if not needed): /sw/soplex/src
-> creating softlink "lib/spxinc" -> "/sw/soplex/src"

** missing soft-link "lib/libsoplex.linux.x86.gnu.a"
** enter soft-link target file or directory for "lib/libsoplex.linux.x86.gnu.a" (return if not needed): /sw/soplex/lib/libsoplex.linux.x86.gnu.opt.a
-> creating softlink "lib/libsoplex.linux.x86.gnu.a" -> "/sw/soplex/lib/libsoplex.linux.x86.gnu.opt.a"

** missing soft-link "lib/libsoplex.linux.x86.gnu.so"
** this soft-link is not necessarily needed since "lib/libsoplex.linux.x86.gnu.a" already exists - press return to skip
** enter soft-link target file or directory for "lib/libsoplex.linux.x86.gnu.so" (return if not needed):
-> skipped creation of softlink "lib/libsoplex.linux.x86.gnu.so". Call "make links" if needed later.

** missing soft-link "lib/zimplinc/zimpl"
** enter soft-link target file or directory for "lib/zimplinc/zimpl" (return if not needed): /sw/zimpl/src
-> creating softlink "lib/zimplinc/zimpl" -> "/sw/zimpl/src"

** missing soft-link "lib/libzimpl.linux.x86.gnu.a"
** enter soft-link target file or directory for "lib/libzimpl.linux.x86.gnu.a" (return if not needed): /sw/zimpl/lib/libzimpl.linux.x86.gnu.opt.a
-> creating softlink "lib/libzimpl.linux.x86.gnu.a" -> "/sw/zimpl/lib/libzimpl.linux.x86.gnu.opt.a"

** missing soft-link "lib/libzimpl.linux.x86.gnu.so"
** this soft-link is not necessarily needed since "lib/libzimpl.linux.x86.gnu.a" already exists - press return to skip
** enter soft-link target file or directory for "lib/libzimpl.linux.x86.gnu.so" (return if not needed):
-> skipped creation of softlink "lib/libzimpl.linux.x86.gnu.so". Call "make links" if needed later.

make[1]: Leaving directory `/sw/scip'
---

   Example 2 (CPLEX, no ZIMPL):
   ============================

   Typing "make LPS=cpx ZIMPL=false" uses CPLEX as LP solver. You will be
   asked the following questions on
   the first call to "make" (example answers are already given):

---
make[1]: Entering directory `/sw/scip'

** creating softlinks: LPS=cpx OSTYPE=linux ARCH=x86 COMP=gnu SUFFIX= ZIMPL=false

** missing soft-link "lib/cpxinc"
** enter soft-link target file or directory for "lib/cpxinc" (return to skip): /sw/cplex/include/ilcplex
-> creating softlink "lib/cpxinc" -> "/sw/cplex/include/ilcplex"

** missing soft-link "lib/libcplex.linux.x86.gnu.a"
** enter soft-link target file or directory for "lib/libcplex.linux.x86.gnu.a" (return to skip): /sw/cplex/lib/x86_rhel4.0_3.4/static_pic/libcplex.a
-> creating softlink "lib/libcplex.linux.x86.gnu.a" -> "/sw/cplex/lib/x86_rhel4.0_3.4/static_pic/libcplex.a"

** missing soft-link "lib/libcplex.linux.x86.gnu.so"
** enter soft-link target file or directory for "lib/libcplex.linux.x86.gnu.so" (return to skip):
-> skipped creation of softlink "lib/libcplex.linux.x86.gnu.so". Call "make links" if needed later.

make[1]: Leaving directory `/sw/scip'
---

   Example 3 (CLP, IPOPT, CppAD, no ZIMPL):
   ========================================

   Typing "make LPS=clp ZIMPL=false IPOPT=true EXPRINT=cppad" uses CLP as LP solver, and activates
   the interfaces to IPOPT and CppAD. You will be asked the following questions on
   the first call to "make" (example answers are already given):

---
make[1]: Entering directory `/sw/scip'

- Current settings: LPS=clp OSTYPE=linux ARCH=x86_64 COMP=gnu SUFFIX= ZIMPL=false ZIMPLOPT=opt IPOPT=true IPOPTOPT=opt EXPRINT=cppad

* SCIP needs some softlinks to external programs, in particular, LP-solvers.
* Please insert the paths to the corresponding directories/libraries below.
* The links will be installed in the 'lib' directory.
* For more information and if you experience problems see the INSTALL file.

  -> "clp.*" is a directory containing the Clp installation, i.e., "clp.*/include/coin/ClpModel.hpp" should exist.
  -> "ipopt.*" is a directory containing the ipopt installation, i.e., "ipopt.*/include/coin/IpIpoptApplication.hpp", "ipopt.*/lib/libipopt*", ... should exist.
  -> "cppad" is a directory containing the CppAD header files, i.e., "cppad/cppad.hpp" should exist.

- preparing missing soft-link "lib/clp.linux.x86_64.gnu.opt":
> Enter soft-link target file or directory for "lib/clp.linux.x86_64.gnu.opt" (return if not needed): 
> /sw/Clp-1.11/build
-> creating softlink "lib/clp.linux.x86_64.gnu.opt" -> "/sw/Clp-1.11/build"

- preparing missing soft-link "lib/ipopt.linux.x86_64.gnu.opt":
> Enter soft-link target file or directory for "lib/ipopt.linux.x86_64.gnu.opt" (return if not needed):
> /sw/ia64_lx26/ipopt-3.10.0/
-> creating softlink "lib/ipopt.linux.x86_64.gnu.opt" -> "/sw/ia64_lx26/ipopt-3.10.0/"

make[1]: Leaving directory `/sw/scip'
---


   If you ever need to modify the soft-link targets, delete the soft-links in the "lib/" subdirectory
   and enter "make links" to generate them again.

   After the soft-links have been created, the compilation of the source files should start.


   Compilation problems:
   =====================

   If the soft-link query script does not work on your machine, read step 2 for instructions on manually
   creating the soft-links.

   If you get an error message of the type
   "make: *** No rule to make target `lib/???', needed by `obj/O.linux.x86.gnu.opt/lib/scip/???.o'.  Stop."
   the corresponding soft-link was not created or points to a wrong location.
   Check the soft-link targets in the "lib/" subdirectory. Try to delete all soft-links from the "lib/" directory
   and call "make links" to generate them again. If this still fails, read step 2 for instructions on manually
   creating the soft-links.

   If you get an error message of the type
   "make: *** No rule to make target `make/make.?.?.?.?.?'.  Stop.",
   the corresponding machine dependent makefile for your architecture and compiler is missing.
   Create one of the given name in the "make/" subdirectory. You may take
   "make/make.linux.x86.gnu.opt" or any other file in the make subdirectory as example.

   The readline library seems to differ sligtly on different OS distributions. Some versions
   do not support the remove_history() call.
   In this case, you have to either add "-DNO_REMOVE_HISTORY" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_REMOVE_HISTORY".
   Make sure, the file "src/scip/dialog.c" is recompiled.
   If this doesn't work either, disable the readline library with "make READLINE=false".

   On some systems, the sigaction() method is not available.
   In this case, you have to either add "-DNO_SIGACTION" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_SIGACTION".
   Make sure, the file "src/scip/interrupt.c" is recompiled.

   On some systems, the rand_r() method is not available.
   In this case, you have to either add "-DNO_RAND_R" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_RAND_R".
   Make sure, the file "src/scip/misc.c" is recompiled.

   On some systems, the strtok_r() method is not available.
   In this case, you have to either add "-DNO_STRTOK_R" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_STRTOK_R".
   Make sure, the file "src/scip/misc.c" is recompiled.

   On some systems, the strerror_r() method is not available.
   In this case, you have to either add "-DNO_STRERROR_R" to the FLAGS in the
   appropriate make/make.* file, or to compile with "make USRFLAGS=-DNO_STRERROR_R".
   Make sure, the file "src/scip/misc.c" is recompiled.

   On some systems, the option [-e] is not available for the read command.
   You have to compile with READ=read.
   
   In some situations, it may be necessary to adjust the flags for
   linking against Clp. SCIP's Makefile tries to find the file
   "clp_addlibs.txt", which specifies the needed libraries. The first
   thing you should check is whether "clp_addlibs.txt" is present at
   in path "libclp.*/share/coin/doc/Clp/" (you may have to correct
   this path for some Clp versions). If this file is not present in
   your Clp version, SCIP tries to guess the paths and libraries: it
   assumes that Blas and Lapack are installed as system libraries
   (libblas.a, liblapack.a) and are not build into the CoinUtils
   library. If that is different in your build of Clp, you may have to
   remove $(LINKCXX_l)lapack$(LINKLIBSUFFIX) from the LPSLDFLAGS in
   Makefile or make.project. Also removing
   $(LINKCXX_l)bz2$(LINKLIBSUFFIX) may help in some cases.

   If you encounter other compiler or linker errors, you should recompile with
   "make VERBOSE=true ..." in order to get the full compiler invocation. This might help to
   fix the corresponding machine dependent makefile in the make subdirectory.


3. Instructions for manually creating the soft-links, if the query script fails:

   Create necessary soft-links in the "lib/" subdirectory of SCIP:

   (a) to use SOPLEX (Version >= 1.4.0)
       - ln -s <path to SOPLEX' *.h files> <path to SCIP>/lib/spxinc
       - ln -s <file libsoplex.[...].a> <path to SCIP>/lib/libsoplex.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /soplex/lib/libsoplex.linux.x86.gnu.opt.a lib/libsoplex.linux.x86.gnu.a")
         Warning! The ".opt" in the name of the SOPLEX library does not appear in the name of the soft-link.

   (b) to use SOPLEX (Version 1.3.2)
       - ln -s <path to SOPLEX' *.h files> <path to SCIP>/lib/spx132inc
       - ln -s <file libsoplex.[...].a> <path to SCIP>/lib/libsoplex132.$(OSTYPE).$(ARCH).$(COMP).a
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /soplex132/lib/libsoplex.linux.x86.gnu.opt.a lib/libsoplex132.linux.x86.gnu.a")
         Warning! The ".opt" in the name of the SOPLEX library does not appear in the name of the soft-link.

   (c) to use CPLEX (Version >= 10.0)
       - ln -s <path to directory of cplex.h> <path to SCIP>/lib/cpxinc
         (e.g. "cd scip; ln -s /cplex121/include/ilcplex lib/cpxinc")
       - ln -s <file libcplex.a> <path to SCIP>/lib/libcplex.$(OSTYPE).$(ARCH).$(COMP).a
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /cplex121/lib/x86-64_debian4.0_4.1/static_pic/libcplex.a lib/libcplex.linux.x86.gnu.a")

   (d) to use XPRESS
       - ln -s <path to directory of xprs.h> <path to SCIP>/lib/xprsinc
         (e.g. "cd scip; ln -s /xpressmp/include lib/xprsinc")
       - ln -s <file libxprs.a> <path to SCIP>/lib/libxprs.$(OSTYPE).$(ARCH).$(COMP).a
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /xpressmp/lib/libxprs.a lib/libxprs.linux.x86.gnu.a")

   (e) to use MOSEK
       - ln -s <path to directory of mosek.h> <path to SCIP>/lib/mskinc
         (e.g. "cd scip; ln -s /mosek/4/tools/platform/linux32x86/h lib/mskinc")
       - ln -s <file libmosek.so> <path to SCIP>/lib/libmosek.$(OSTYPE).$(ARCH).$(COMP).so
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /mosek/4/tools/platform/linux32x86/bin/libmosek.so lib/libmosek.linux.x86.gnu.so")
       - since MOSEK is a shared library, make sure your LD_LIBRARY_PATH contains <path to SCIP>/lib

   (f) to use CLP
       - ln -s <path to Clp main directory> <path to SCIP>/lib/libclp.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT)
         for each operating system and architecture to use
         (e.g. "cd scip; ln -s /Coin-Clp lib/libclp.linux.x86.gnu.opt")

   (g) to use ZIMPL as additional file reader for reading *.zpl files
       - mkdir <path to SCIP>/lib/zimplinc
       - ln -s <path to ZIMPL's *.h files> <path to SCIP>/lib/zimplinc/zimpl
       - ln -s <file libzimpl-<version>.<options>.a> <path to SCIP>/lib/libzimpl.$(OSTYPE).$(ARCH).$(COMP).a
       Note that ZIMPL needs the GNU multiprecision library (GMP) and the Z compression library (ZLIB) to be
       installed on your system.

   (h) to use IPOPT as NLP solver
       - ln -s <path to IPOPT installation> <path to SCIP>/lib/ipopt.$(OSTYPE).$(ARCH).$(COMP).$(IPOPTOPT)
         (e.g. "cd scip; ln -s /Ipopt lib/ipopt.linux.x86.gnu.opt")
         The path to the IPOPT installation is the path under where the Ipopt build has been installed.
         It should contain the directories include/coin with the Ipopt header files, the directory lib with the Ipopt libraries,
         and the directory share/coin/doc/Ipopt (Ipopt >= 3.9.0) or share/doc/coin/Ipopt (Ipopt < 3.9.0) with the ipopt_addlibs_cpp.txt file.

   (i) to use CppAD as expressions interpreter
       - ln -s <path to CppAD's header files> <path to SCIP>/lib/cppad
         (e.g. "cd scip; ln -s /CppAD/cppad lib/cppad")

4. To run the program enter "bin/scip.$(OSTYPE).$(ARCH).$(COMP).$(OPT).$(LPS)"
   (e.g. "bin/scip.linux.x86.gnu.opt.spx") or just "bin/scip" for the last compiled version

5. To generate the documentation, you need to have doxygen installed, and
   enter "make doc"

6. To check the code with lint, you need to have flexelint installed, and
   enter "make lint"

7. To run the MIPLIB 3 test bench, download the MIPLIB instances from
   "http://scip.zib.de/download/files/scip-miplib3.zip" and extract the archive into the SCIP base directory.
   The instances will be unziped into the subdirectory "check/IP/miplib3/". Afterwards, enter
   "make [options] test" with the same options with which you compiled SCIP in step 1.



-----------------------------------------------
Remarks on Installing under Windows using MinGW
-----------------------------------------------

To build your own Windows binaries under Windows, we recommend using the MinGW-Compiler with MSYS from mingw.org

First install MSYS, then MinGW to the mingw folder inside the msys folder.
Now you need to install the following packages to the mingw folder:
- zlib (or use ZLIB=false ZIMPL=false since zlib is needed for ZIMPL and ZIMPL-support in SCIP)
- pcre (or use ZIMPL=false since pcre is needed for ZIMPL and ZIMPL-support in SCIP)
- gmplib (or use ZIMPL=false since gmplib is needed for ZIMPL and ZIMPL-support in SCIP)

(After calling "make clean" in the ZIMPL folder you will also need flex and bison to remake ZIMPL.
 We recommend NOT to use "make clean" inside the ZIMPL-folder if you do not have these packages installed.)

You can download these additional packages as precompiled binaries for example from:
http://gnuwin32.sourceforge.net/packages.html (zlib&pcre)
http://cs.nyu.edu/exact/core/gmp/ (gmplib)
or compile the source on your own from the project homepages:
http://www.zlib.net/
http://www.pcre.org/
http://www.gmplib.org/
(The command "./configure --prefix=/mingw ; make ; make install" should succeed without problems and installs the packages into the mingw folder.)

Now "make READLINE=false" should be compiling without errors.

Please note that we do NOT support creating the doxygen documentation or readline-usage under Windows.

Since there are no real symlinks in MSYS, the include and library files of SoPlex and ZIMPL are actually copied into the SCIP-lib-folder.
When you recompile ZIMPL or SoPlex after compiling SCIP you have to copy the libraries manually into the SCIP-lib-folder and recompile SCIP afterwards.



---------------------------------------------------------------------
Installing SCIP in Exact Solving Mode (without Floating-Point Errors)
---------------------------------------------------------------------

This version of SCIP can solve MIP instances exactly over the rational
numbers. So far the branch-and-bound algorithm of SCIP has been adapted for
exact MIP solving. It works with safe primal and dual bounds and supports
the branching plugins of SCIP. All additional plugins, like separators,
primal heuristics, and presolvers must not be included (adding them might
introduce rounding errors).


The following variables were added to the Makefile to enable compiling SCIP
for exact MIP solving.


- $(REDUCEDSOLVE): whether to reduce SCIP to a pure branch-and-bound algorithm, excluding all additional plugins
             "true", "false"

- $(BRANCHPLGS): whether to include all branching plugins
  	     (otherwise the branch-and-bound algorithm will apply first-fractional variable branching)
             "true", "false"

- $(EXACTSOLVE): whether to run the branch-and-bound algorithm in exact solving mode
             "true", "false"

- $(LPSEX):  the exact LP solver to use
             "qsoex", "none"


Here is what you have to do to get SCIP running in exact mode:


1. Install and link the following software packages.

   Package: GNU Multiple Precision Arithmetic Library (GMP) -- tested with version 4.3.1
   =====================================================================================

   GMP is required for the exact LP solver QSopt_ex, SCIP in exact solving
   mode, ZIMPL, and the GNU MPFR library. It can be downloaded from
   "ftp://ftp.gnu.org/gnu/gmp". For correct behavior in QSopt_ex, it must
   be compiled using the option "--enable-alloca=malloc-reentrant" which
   avoids memory overwriting problems. You can use the following commands
   for correctly installing GMP (see also "Installing GMP" on
   "http://gmplib.org/manual").

   - "cd <path>/gmp-4.3.1"
   - "./configure --disable-shared --enable-static --enable-alloca=malloc-reentrant --prefix=<path>/gmp-4.3.1/lib"
   - "make"
   - "make check"
   - "make install"

   If you need to use a local GMP installation for SCIP, please provide the
   corresponding path via a new local makefile
   "myscip/make/local/make.$(HOSTNAME)". For example,
   "myscip/make/local/make.alibaba" could contain lines of the form

   FLAGS	      +=	-I<path>/gmp-4.3.1/lib/include
   LDFLAGS	      +=	-L<path>/gmp-4.3.1/lib/lib


   Package: GNU MPFR Library (MPFR) -- tested with version 2.4.2
   =============================================================

   SCIP in exact solving mode requires MPFR. It can be downloaded from
   "ftp://ftp.gnu.org/gnu/mpfr". You can use the following commands
   for correctly installing MPFR (see also "Installing MPFR" on
   "http://www.mpfr.org/mpfr-current/mpfr.html").

   - "cd <path>/mpfr-2.4.2
   - "./configure --disable-shared --enable-static --prefix=<path>/mpfr-2.4.2/lib"
   - "make"
   - "make check"
   - "make install"

   If you need to use a local MPFR installation for SCIP, please provide
   the corresponding path via a (new) local makefile
   "myscip/make/local/make.$(HOSTNAME)". For example,
   "myscip/make/local/make.alibaba" could contain lines of the form

   FLAGS           +=      -I<path>/mpfr-2.4.2/lib/include
   LDFLAGS         +=      -L<path>/mpfr-2.4.2/lib/lib


   Package: ZIMPL version 3.0.0
   ============================

   SCIP in exact solving mode requires ZIMPL for reading in a MIP instance
   without floating-point errors. Please stick to version 3.0.0; the ZIMPL
   reader of the present SCIP version is not compatible with newer ZIMPL
   versions. It can be downloaded from "http://zimpl.zib.de/download". You
   can use the following commands for installing ZIMPL.

   - "cd <path>/zimpl-3.0.0
   - "make"
   - "make check"

   SCIP will automatically ask for the path to ZIMPL while compiling (see
   standard SCIP instructions above).

   Note that for some larger MIP instances, ZIMPL 3.0.0 only works if the
   stack size is large enough, otherwise you will get a segmentation
   fault. In a bash shell, the command "ulimit -s unlimited" corrects this
   problem.

   To convert files given in mps-format to files in zpl-format for ZIMPL,
   you can use the script "mps2zpl.sh"; see Step 5.


   Package: Standard LP solver
   ===========================

   You will need a standard LP solver based on floating-point
   arithmetic. SCIP will automatically ask for the path to the standard LP
   solver while compiling (see standard SCIP instructions above).


   Package: QSopt_ex version 2.5.5
   ===============================

   You need the exact LP solver QSopt_ex. You can obtain it via

   - "svn co https://conexo.dii.uchile.cl/SVN/ESolver/tags/QSopt_ex-2.5.5 QSopt_ex-2.5.5".

   Please stick to version 2.5.5. We tested the interface of SCIP for this
   version and, in particular, the following required replacement will only
   work for QSopt_ex 2.5.5. You need to add the functions
   "QSexact_verify()" and "QSexact_basis_dualstatus()" to QSopt_ex, which
   test a given basis for dual feasibility. For this, please, replace the
   files

   - "QSopt_ex-2.5.5/EXact/exact.c"
   - "QSopt_ex-2.5.5/EXact/exact.h"
   - "QSopt_ex-2.5.5/include/QSopt_ex.h"

   by the ones provided in the directory "QSopt_ex-2.5.5-replace".

   For installing the QSopt_ex, we refer to the file
   "QSopt_ex-2.5.5/README". The most important point is that QSopt_ex
   requires the GMP library to be compiled using the option
   "--enable-alloca=malloc-reentrant", which avoids memory overwriting
   problems (see point "Package: GMP").

   Before compiling QSopt_ex, make sure to update the GMP path in
   "QSopt_ex-2.5.5/make.conf" (copy of "QSopt_ex-2.5.5/make.conf.default")
   and "QSopt_ex-2.5.5/EGlib/make.conf". For example, replace the the
   "GNUMP_LIB_DIR" and "GNUMP_INCLUDE_DIR" lines in both files by

   GNUMP_LIB_DIR += <path>/gmp-4.3.1/lib/lib
   GNUMP_INCLUDE_DIR += <path>/gmp-4.3.1/lib/include

   You can use the following commands for installing QSopt_ex.

   - "cd <path>/QSopt_ex-2.5.5
   - "make"

   SCIP will automatically ask for missing links to QSopt_ex while
   compiling (see Step 2).


2. Compile the library and the solver program: In your SCIP main directory,
   enter "make [options]" with the options "OPT", "COMP", "LPS", "ZLIB",
   and "READLINE", explained in the standard SCIP instructions above, and the
   following additional options:


   - "ZIMPL=true"       to enable ZIMPL file reader (default)
   - "ZIMPL=false"      to disable ZIMPL file reader (not compatible with "EXACTSOLVE=true")

   - "GMP=true"         to use GMP library
   - "GMP=false"        to disable GMP usage (not compatible with "EXACTSOLVE=true" or "ZIMPL=true")
   - "GMP=auto"         to automatically link the GMP library in case "ZIMPL" or "EXACTSOLVE" is enabled (default)

   - "REDUCEDSOLVE=true"  to reduce SCIP to a pure branch-and-bound algorithm, excluding all additional plugins
   - "REDUCEDSOLVE=false" to use SCIP with all default plugins (default; not compatible with "EXACTSOLVE=true")

   - "BRANCHPLGS=true"  to include all branching plugins (default)
   - "BRANCHPLGS=false" to exclude all branching plugins and thus use first-fractional variable branching
                        Note: the value of "BRANCHPLGS" has no effect if "REDUCEDSOLVE=false".

   - "LPSEX=qsoex"      to use QSopt_ex as exact LP solver
   - "LPSEX=none        to use no exact LP solver (default; not compatible with "EXACTSOLVE=true")

   - "EXACTSOLVE=true"  to run SCIP in exact solving mode (requires "ZIMPL=true", "GMP=auto/true", "REDUCEDSOLVE=true", "LPSEX=qsoex")
   - "EXACTSOLVE=false" to run SCIP in standard, floating-point, solving mode (default)

   On your first compilation with "LPSEX=qsoex" you will be asked for
   additional soft-link targets. SCIP needs the following information

     (a) the directory with the include files of QSopt_ex
     (b) the library file(s) "lib*.a" or/and "lib*.so" of QSopt_ex

     (c) the directory with the include files of EGlib (part of the QSopt_ex distribution)
     (d) the library file(s) "lib*.a" or/and "lib*.so" of the EGlib library

     (e) include- and lib-info for ZIMPL (see standard SCIP instructions above)

   See also Step 3 for more details about the soft-links. You will need
   either the ".a" or the ".so" files and can skip the others by just
   pressing "return".


   Example 1 (Branch-and-bound algorithm in exact solving mode, all branching plugins)
   ===================================================================================

   Typing

   "make LPS=cpx LPSEX=qsoex REDUCEDSOLVE=true EXACTSOLVE=true"

   uses CPLEX as standard LP solver and QSopt_ex as exact LP solver. It
   results in a reduced version of SCIP (only branch-and-bound) with SCIP's
   default branching plugins. It will solve a MIP instance exactly.


   Example 2 (Branch-and-bound algorithm in exact solving mode, no branching plugins)
   ==================================================================================

   Typing

   "make LPS=cpx LPSEX=qsoex REDUCEDSOLVE=true EXACTSOLVE=true BRANCHPLGS=false"

   uses CPLEX as standard LP solver and QSopt_ex as exact LP solver. It
   results in a reduced version of SCIP (only branch-and-bound) with only
   first-fractional variable branching. It will solve a MIP instance
   exactly.


   Example 3 (Branch-and-bound algorithm in standard solving mode, all branching plugins)
   ======================================================================================

   Typing

   "make LPS=cpx REDUCEDSOLVE=true"

   uses CPLEX as standard LP solver and no exact LP solver. It results in a
   reduced version of SCIP (only branch-and-bound) with SCIP's default
   branching plugins. It will solve a MIP instance with floating-point
   arithmetic and thus cannot guarantee to produce correct results.


   Example 4 (Branch-and-bound algorithm in standard solving mode, no branching plugins)
   =====================================================================================

   Typing

   "make LPS=cpx REDUCEDSOLVE=true BRANCHPLGS=false"

   uses CPLEX as standard LP solver and no exact LP solver. It results in a
   reduced version of SCIP (only branch-and-bound) with only
   first-fractional variable branching. It will solve a MIP instance with
   floating-point arithmetic and thus cannot guarantee to produce correct
   results.


3. Instructions for manually creating the soft-links, if the query script
   fails:

   Create necessary soft-links in the "lib/" subdirectory of SCIP:

   (a1) to use QSopt_ex
       - ln -s <path to directory of QSopt_ex.h> <path to SCIP>/lib/qsexinc
         (e.g. "cd scip; ln -s /QSopt_ex-2.5.5/include lib/qsexinc")
       - ln -s <file QSopt_ex.a> <path to SCIP>/lib/libqsoptex.$(OSTYPE).$(ARCH).$(COMP).a
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /QSopt_ex-2.5.5/lib/QSopt_ex.a lib/libqsoptex.linux.x86.gnu.a")

   (a2) to use EGlib
       - ln -s <path to directory of EGlib.h> <path to SCIP>/lib/EGlibinc
         (e.g. "cd scip; ln -s /QSopt_ex-2.5.5/EGlib/include lib/EGlibinc")
       - ln -s <file EGlib.a> <path to SCIP>/lib/libeglib.$(OSTYPE).$(ARCH).$(COMP).a
         for each operation system and architecture to use
         (e.g. "cd scip; ln -s /QSopt_ex-2.5.5/EGlib/lib/EGlib.a lib/libeglib.linux.x86.gnu.a")

4. To run the program enter
   "bin/scip.$(OSTYPE).$(ARCH).$(COMP).$(OPT).$(LPS)"
   (e.g. "bin/scip.linux.x86.gnu.opt.cpx") or just "bin/scip" for the last
   compiled version. NOTE: In the interactive shell, you can change the
   default values of the user parameters. The parameter "misc/usefprelax"
   has to be set before a MIP instance is read in as it influences the
   behavior of the ZIMPL reader.

5. To run some of the MIPLIB test instances, download the MIPLIB 3.0 test
   set from "http://scip.zib.de/download/files/scip-miplib3.zip" and
   extract the archive into the SCIP base directory. The instances will be
   unziped into the subdirectory "check/IP/miplib3/". For the exact version
   of SCIP you have to convert the downloaded mps-files into zpl-files (to
   be able to read them via the ZIMPL reader). Please, use the "mps2zpl.sh"
   script, which you will find in the SCIP base directory, to convert all
   instances stated in "check/shortmiplibex.test". For example, run

   "mps2zpl.sh check/IP/miplib3/air03.mps"

   Afterwards, enter

   "make [options] TEST=shortmiplibex test"

   with the same options with which you compiled SCIP in step 1.
