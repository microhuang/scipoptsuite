#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#*                                                                           *
#*                  This file is part of the program and library             *
#*         SCIP --- Solving Constraint Integer Programs                      *
#*                                                                           *
#*    Copyright (C) 2002-2014 Konrad-Zuse-Zentrum                            *
#*                            fuer Informationstechnik Berlin                *
#*                                                                           *
#*  SCIP is distributed under the terms of the ZIB Academic Licence.         *
#*                                                                           *
#*  You should have received a copy of the ZIB Academic License              *
#*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      *
#*                                                                           *
#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#@file    Makefile
#@brief   SCIP Makefile for nmake
#@author  Thorsten Koch
#@author  Ambros Gleixner

#-----------------------------------------------------------------------------
# specify host architecture
#-----------------------------------------------------------------------------

OSTYPE			=	win
ARCH			=	x86

#-----------------------------------------------------------------------------
# default settings
#-----------------------------------------------------------------------------

VERSION			=	3.1.0.1
VERBOSE			=	false
OPT				=	opt
COMP			=	msvc
LPS				=	spx
SHARED			=	false
LEGACY			=	false

#third party compiling parameters
ZLIB			=	true
GMP				=	true
ZIMPL			=	true
EXPRINT			=	cppad
LPSOPT			=	opt
ZIMPLOPT		=	opt

CC				=	cl
CXX				=	cl
AR				=	LIB

CPPFLAGS		=	/I$(SRCDIR) /DWITH_SCIPDEF \
					/D_CRT_SECURE_NO_WARNINGS /DROUNDING_MS /DNO_SIGACTION /DNO_NEXTAFTER /Dstrtok_r=strtok_s /Drand_r=rand_s #/Dstrerror_r=strerror_s
CFLAGS			=	/nologo /EHsc
CXXFLAGS		=	/nologo /EHsc
LDFLAGS			=	/link /STACK:67108864 /LTCG /OPT:REF /OPT:ICF /NOLOGO # /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBCMTD
ARFLAGS			=	/nologo

BASE			=	$(OSTYPE).$(ARCH).$(COMP).$(OPT)
OBJDIR			=	obj\O.$(BASE).$(LINK)
BINOBJDIR		=	$(OBJDIR)\bin
LIBOBJDIR		=	$(OBJDIR)\lib
LIBOBJSUBDIRS	=	scip objscip blockmemshell tclique lpi nlpi xml dijkstra
SRCDIR			=	src
LIBDIR			=	lib
BINDIR			=	bin

#-----------------------------------------------------------------------------
!include make/nmake.$(BASE)
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# add user flags
#-----------------------------------------------------------------------------

FLAGS			=	$(FLAGS) $(USRFLAGS)
CFLAGS			=	$(CFLAGS) $(USRCFLAGS)
CXXFLAGS		=	$(CXXFLAGS) $(USRCXXFLAGS)
LDFLAGS			=	$(LDFLAGS) $(USRLDFLAGS)
ARFLAGS			=	$(ARFLAGS) $(USRARFLAGS)

#-----------------------------------------------------------------------------
# Memory Management
#-----------------------------------------------------------------------------

#FLAGS			=	$(FLAGS) /DBMS_NOSAFEMEM
#FLAGS			=	$(FLAGS) /DBMS_NOBLOCKMEM

#-----------------------------------------------------------------------------
# PARASCIP
#-----------------------------------------------------------------------------

CPPFLAGS		=	$(CPPFLAGS) /DNPARASCIP

#-----------------------------------------------------------------------------
# LEGACY
#-----------------------------------------------------------------------------

!if "$(LEGACY)" == "true"
CPPFLAGS	=	$(CPPFLAGS) /DSOPLEX_LEGACY
!endif

#-----------------------------------------------------------------------------
# LP Solver Interface
#-----------------------------------------------------------------------------

LPILIBSHORTNAME	=	lpi$(LPS)
LPILIBNAME		=	$(LPILIBSHORTNAME)-$(VERSION)
LPILIBOBJ		=
LPIINSTMSG		=

!if "$(LPS)" == "spx"
CPPFLAGS		=	$(CPPFLAGS) /Ilib\spxinc
LPILIBOBJ		=	$(LIBOBJDIR)\lpi\lpi_spx.obj $(LIBOBJDIR)\scip\bitencode.obj $(LIBOBJDIR)\blockmemshell\memory.obj $(LIBOBJDIR)\scip\message.obj
LDFLAGS			=	lib\libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT).lib $(LDFLAGS)
!endif

!if "$(LPS)" == "spx2"
CPPFLAGS		=	$(CPPFLAGS) /Ilib\spxinc
LPILIBOBJ		=	$(LIBOBJDIR)\lpi\lpi_spx2.obj $(LIBOBJDIR)\scip\bitencode.obj $(LIBOBJDIR)\blockmemshell\memory.obj $(LIBOBJDIR)\scip\message.obj
LDFLAGS			=	lib\libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(LPSOPT).lib $(LDFLAGS)
!endif

!if "$(LPS)" == "none"
LPILIBOBJ		=	$(LIBOBJDIR)\lpi\lpi_none.obj $(LIBOBJDIR)\blockmemshell\memory.obj $(LIBOBJDIR)\scip\message.obj
!endif

LPILIB			=	$(LPILIBNAME).$(BASE)
LPILIBFILE		=	$(LIBDIR)\lib$(LPILIB).lib
LPILIBOBJFILES	=	$(LPILIBOBJ)

LPILIBDEP		=	$(SRCDIR)\depend.lpilib.$(LPS).$(OPT)

#-----------------------------------------------------------------------------
# NLP Solver Interfaces and expression interpreter 
#-----------------------------------------------------------------------------

NLPILIBCOBJ		=	$(LIBOBJDIR)\nlpi\nlpi.obj \
					$(LIBOBJDIR)\nlpi\nlpioracle.obj \
					$(LIBOBJDIR)\nlpi\expr.obj \

NLPILIBCXXOBJ	=	$(LIBOBJDIR)\nlpi\intervalarithext.obj $(LIBOBJDIR)\nlpi\exprinterpret_cppad.obj

NLPILIBSCIPOBJ	=	$(LIBOBJDIR)\blockmemshell\memory.obj \
					$(LIBOBJDIR)\scip\misc.obj \
					$(LIBOBJDIR)\scip\intervalarith.obj \
					$(LIBOBJDIR)\scip\interrupt.obj \
					$(LIBOBJDIR)\scip\message.obj

!if "$(IPOPT)" == "true"
CPPFLAGS			=	$(CPPFLAGS) /Ilib\ipopt.$(ARCH)\include\coin
!if "$(ARCH)" == "x86"
LDFLAGS			=	lib\ipopt.$(ARCH)\lib\libipopt.lib \
					lib\ipopt.$(ARCH)\lib\libcoinmumps.lib \
					lib\mkl.$(ARCH)\mkl_intel_c.lib \
					lib\mkl.$(ARCH)\mkl_sequential.lib \
					lib\mkl.$(ARCH)\mkl_core.lib \
					lib\if.$(ARCH)\ifconsol.lib \
					lib\if.$(ARCH)\libifcoremt.lib \
					lib\if.$(ARCH)\libifport.lib \
					lib\if.$(ARCH)\libmmt.lib \
					lib\if.$(ARCH)\libirc.lib \
					lib\if.$(ARCH)\svml_dispmt.lib \
					$(LDFLAGS)
!else
LDFLAGS			=	lib\ipopt.$(ARCH)\lib\libipopt.lib \
					lib\ipopt.$(ARCH)\lib\libcoinmumps.lib \
					lib\mkl.$(ARCH)\mkl_intel_lp64.lib \
					lib\mkl.$(ARCH)\mkl_sequential.lib \
					lib\mkl.$(ARCH)\mkl_core.lib \
					lib\if.$(ARCH)\ifconsol.lib \
					lib\if.$(ARCH)\libifcoremt.lib \
					lib\if.$(ARCH)\libifport.lib \
					lib\if.$(ARCH)\libmmt.lib \
					lib\if.$(ARCH)\libirc.lib \
					lib\if.$(ARCH)\svml_dispmt.lib \
					lib\if.$(ARCH)\libdecimal.lib \
					$(LDFLAGS)
!endif
NLPILIBSHORTNAMEIPOPT	=	.ipopt
NLPILIBCXXOBJ		=	$(NLPILIBCXXOBJ) $(LIBOBJDIR)\nlpi\nlpi_ipopt.obj
!else
NLPILIBCOBJ		=	$(NLPILIBCOBJ) $(LIBOBJDIR)\nlpi\nlpi_ipopt_dummy.obj
!endif

NLPILIBSHORTNAMECPPAD	=	.cppad

NLPILIBSHORTNAME=	nlpi$(NLPILIBSHORTNAMECPPAD)$(NLPILIBSHORTNAMEIPOPT)
NLPILIBNAME		=	$(NLPILIBSHORTNAME)-$(VERSION)
NLPILIB			=	$(NLPILIBNAME).$(BASE)
NLPILIBFILE		=	$(LIBDIR)\lib$(NLPILIB).lib

NLPILIBOBJFILES =	$(NLPILIBCOBJ) $(NLPILIBCXXOBJ)
NLPILIBSCIPOBJFILES =	$(NLPILIBSCIPOBJ)

NLPILIBDEP		=	$(SRCDIR)/depend.nlpilib$(NLPILIBSHORTNAMECPPAD)$(NLPILIBSHORTNAMEIPOPT).$(OPT)

#-----------------------------------------------------------------------------
# External Libraries
#-----------------------------------------------------------------------------

!if "$(ZIMPL)" == "true"
CPPFLAGS		=	$(CPPFLAGS) /DWITH_ZIMPL /Ilib /Ilib\zimpl\WIN
LDFLAGS			=	lib\libzimpl.$(OSTYPE).$(ARCH).$(COMP).$(ZIMPLOPT).lib lib\libpcre.$(ARCH).lib $(LDFLAGS)
!endif

!if "$(GMP)" == "true"
CPPFLAGS		=	$(CPPFLAGS) /DWITH_GMP /Ilib\mpir.$(ARCH) # /Ilib
LDFLAGS			=	lib\libmpir.$(ARCH).lib $(LDFLAGS)
!endif

!if "$(ZLIB)" == "true"
CPPFLAGS		=	$(CPPFLAGS) /DWITH_ZLIB /Ilib\zlib
LDFLAGS			=	lib\libz.$(ARCH).lib $(LDFLAGS) /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBCMTD
!endif

#-----------------------------------------------------------------------------
# SHARED Libaries
#-----------------------------------------------------------------------------

!if "$(SHARED)" == "true"
LINK			=	ld
LINKLIBEXT		=	ld
!else
LINK			=	mt
LINKLIBEXT		=	mt
!endif

#-----------------------------------------------------------------------------
# SCIP Library
#-----------------------------------------------------------------------------

SCIPLIBSHORTNAME=	scip
SCIPLIBNAME		=	$(SCIPLIBSHORTNAME)-$(VERSION)
SCIPPLUGINLIBOBJ=	\
					$(LIBOBJDIR)\scip\branch_allfullstrong.obj \
					$(LIBOBJDIR)\scip\branch_cloud.obj \
					$(LIBOBJDIR)\scip\branch_fullstrong.obj \
					$(LIBOBJDIR)\scip\branch_inference.obj \
					$(LIBOBJDIR)\scip\branch_mostinf.obj \
					$(LIBOBJDIR)\scip\branch_leastinf.obj \
					$(LIBOBJDIR)\scip\branch_pscost.obj \
					$(LIBOBJDIR)\scip\branch_random.obj \
					$(LIBOBJDIR)\scip\branch_relpscost.obj \
					$(LIBOBJDIR)\scip\cons_abspower.obj \
					$(LIBOBJDIR)\scip\cons_and.obj \
					$(LIBOBJDIR)\scip\cons_bivariate.obj \
					$(LIBOBJDIR)\scip\cons_bounddisjunction.obj \
					$(LIBOBJDIR)\scip\cons_conjunction.obj \
					$(LIBOBJDIR)\scip\cons_countsols.obj \
					$(LIBOBJDIR)\scip\cons_cumulative.obj \
					$(LIBOBJDIR)\scip\cons_disjunction.obj \
					$(LIBOBJDIR)\scip\cons_indicator.obj \
					$(LIBOBJDIR)\scip\cons_integral.obj \
					$(LIBOBJDIR)\scip\cons_knapsack.obj \
					$(LIBOBJDIR)\scip\cons_linear.obj \
					$(LIBOBJDIR)\scip\cons_linking.obj \
					$(LIBOBJDIR)\scip\cons_logicor.obj \
					$(LIBOBJDIR)\scip\cons_nonlinear.obj \
					$(LIBOBJDIR)\scip\cons_or.obj \
					$(LIBOBJDIR)\scip\cons_orbitope.obj \
					$(LIBOBJDIR)\scip\cons_pseudoboolean.obj \
					$(LIBOBJDIR)\scip\cons_quadratic.obj \
					$(LIBOBJDIR)\scip\cons_setppc.obj \
					$(LIBOBJDIR)\scip\cons_soc.obj \
					$(LIBOBJDIR)\scip\cons_sos1.obj \
					$(LIBOBJDIR)\scip\cons_sos2.obj \
					$(LIBOBJDIR)\scip\cons_superindicator.obj \
					$(LIBOBJDIR)\scip\cons_varbound.obj \
					$(LIBOBJDIR)\scip\cons_xor.obj \
					$(LIBOBJDIR)\scip\dialog_default.obj \
					$(LIBOBJDIR)\scip\disp_default.obj \
					$(LIBOBJDIR)\scip\heur_actconsdiving.obj \
					$(LIBOBJDIR)\scip\heur_clique.obj \
					$(LIBOBJDIR)\scip\heur_coefdiving.obj \
					$(LIBOBJDIR)\scip\heur_crossover.obj \
					$(LIBOBJDIR)\scip\heur_dins.obj \
					$(LIBOBJDIR)\scip\heur_dualval.obj \
					$(LIBOBJDIR)\scip\heur_feaspump.obj \
					$(LIBOBJDIR)\scip\heur_fixandinfer.obj \
					$(LIBOBJDIR)\scip\heur_fracdiving.obj \
					$(LIBOBJDIR)\scip\heur_guideddiving.obj \
					$(LIBOBJDIR)\scip\heur_zeroobj.obj \
					$(LIBOBJDIR)\scip\heur_intdiving.obj \
					$(LIBOBJDIR)\scip\heur_intshifting.obj \
					$(LIBOBJDIR)\scip\heur_linesearchdiving.obj \
					$(LIBOBJDIR)\scip\heur_localbranching.obj \
					$(LIBOBJDIR)\scip\heur_mutation.obj \
					$(LIBOBJDIR)\scip\heur_nlpdiving.obj \
					$(LIBOBJDIR)\scip\heur_objpscostdiving.obj \
					$(LIBOBJDIR)\scip\heur_octane.obj \
					$(LIBOBJDIR)\scip\heur_oneopt.obj \
					$(LIBOBJDIR)\scip\heur_proximity.obj \
					$(LIBOBJDIR)\scip\heur_pscostdiving.obj \
					$(LIBOBJDIR)\scip\heur_rens.obj \
					$(LIBOBJDIR)\scip\heur_randrounding.obj \
					$(LIBOBJDIR)\scip\heur_rins.obj \
					$(LIBOBJDIR)\scip\heur_rootsoldiving.obj \
					$(LIBOBJDIR)\scip\heur_rounding.obj \
					$(LIBOBJDIR)\scip\heur_shiftandpropagate.obj \
					$(LIBOBJDIR)\scip\heur_shifting.obj \
					$(LIBOBJDIR)\scip\heur_simplerounding.obj \
					$(LIBOBJDIR)\scip\heur_subnlp.obj \
					$(LIBOBJDIR)\scip\heur_trivial.obj \
					$(LIBOBJDIR)\scip\heur_trysol.obj \
					$(LIBOBJDIR)\scip\heur_twoopt.obj \
					$(LIBOBJDIR)\scip\heur_undercover.obj \
					$(LIBOBJDIR)\scip\heur_vbounds.obj \
					$(LIBOBJDIR)\scip\heur_veclendiving.obj \
					$(LIBOBJDIR)\scip\heur_zirounding.obj \
					$(LIBOBJDIR)\scip\message_default.obj \
					$(LIBOBJDIR)\scip\nodesel_bfs.obj \
					$(LIBOBJDIR)\scip\nodesel_breadthfirst.obj \
					$(LIBOBJDIR)\scip\nodesel_dfs.obj \
					$(LIBOBJDIR)\scip\nodesel_estimate.obj \
					$(LIBOBJDIR)\scip\nodesel_hybridestim.obj \
					$(LIBOBJDIR)\scip\nodesel_restartdfs.obj \
					$(LIBOBJDIR)\scip\nodesel_uct.obj \
					$(LIBOBJDIR)\scip\presol_boundshift.obj \
					$(LIBOBJDIR)\scip\presol_components.obj \
					$(LIBOBJDIR)\scip\presol_convertinttobin.obj \
					$(LIBOBJDIR)\scip\presol_domcol.obj\
					$(LIBOBJDIR)\scip\presol_dualinfer.obj \
					$(LIBOBJDIR)\scip\presol_gateextraction.obj \
					$(LIBOBJDIR)\scip\presol_implics.obj \
					$(LIBOBJDIR)\scip\presol_inttobinary.obj \
					$(LIBOBJDIR)\scip\presol_trivial.obj \
					$(LIBOBJDIR)\scip\prop_dualfix.obj \
					$(LIBOBJDIR)\scip\prop_genvbounds.obj \
					$(LIBOBJDIR)\scip\prop_obbt.obj \
					$(LIBOBJDIR)\scip\prop_probing.obj \
					$(LIBOBJDIR)\scip\prop_pseudoobj.obj \
					$(LIBOBJDIR)\scip\prop_redcost.obj \
					$(LIBOBJDIR)\scip\prop_rootredcost.obj \
					$(LIBOBJDIR)\scip\prop_vbounds.obj \
					$(LIBOBJDIR)\scip\reader_bnd.obj \
					$(LIBOBJDIR)\scip\reader_ccg.obj \
					$(LIBOBJDIR)\scip\reader_cip.obj \
					$(LIBOBJDIR)\scip\reader_cnf.obj \
					$(LIBOBJDIR)\scip\reader_fix.obj \
					$(LIBOBJDIR)\scip\reader_fzn.obj \
					$(LIBOBJDIR)\scip\reader_gms.obj \
					$(LIBOBJDIR)\scip\reader_lp.obj \
					$(LIBOBJDIR)\scip\reader_mps.obj \
					$(LIBOBJDIR)\scip\reader_opb.obj \
					$(LIBOBJDIR)\scip\reader_osil.obj \
					$(LIBOBJDIR)\scip\reader_pip.obj \
					$(LIBOBJDIR)\scip\reader_ppm.obj \
					$(LIBOBJDIR)\scip\reader_pbm.obj \
					$(LIBOBJDIR)\scip\reader_rlp.obj \
					$(LIBOBJDIR)\scip\reader_sol.obj \
					$(LIBOBJDIR)\scip\reader_wbo.obj \
					$(LIBOBJDIR)\scip\reader_zpl.obj \
					$(LIBOBJDIR)\scip\sepa_cgmip.obj \
					$(LIBOBJDIR)\scip\sepa_clique.obj \
					$(LIBOBJDIR)\scip\sepa_closecuts.obj \
					$(LIBOBJDIR)\scip\sepa_cmir.obj \
					$(LIBOBJDIR)\scip\sepa_flowcover.obj \
					$(LIBOBJDIR)\scip\sepa_gomory.obj \
					$(LIBOBJDIR)\scip\sepa_impliedbounds.obj \
					$(LIBOBJDIR)\scip\sepa_intobj.obj \
					$(LIBOBJDIR)\scip\sepa_mcf.obj \
					$(LIBOBJDIR)\scip\sepa_oddcycle.obj \
					$(LIBOBJDIR)\scip\sepa_rapidlearning.obj \
					$(LIBOBJDIR)\scip\sepa_strongcg.obj \
					$(LIBOBJDIR)\scip\sepa_zerohalf.obj \
      				$(LIBOBJDIR)\scip\branch.obj \
					$(LIBOBJDIR)\scip\buffer.obj \
					$(LIBOBJDIR)\scip\clock.obj \
					$(LIBOBJDIR)\scip\conflict.obj \
					$(LIBOBJDIR)\scip\cons.obj \
					$(LIBOBJDIR)\scip\cutpool.obj \
					$(LIBOBJDIR)\scip\debug.obj \
					$(LIBOBJDIR)\scip\dialog.obj \
					$(LIBOBJDIR)\scip\disp.obj \
					$(LIBOBJDIR)\scip\event.obj \
					$(LIBOBJDIR)\scip\fileio.obj \
					$(LIBOBJDIR)\scip\heur.obj \
					$(LIBOBJDIR)\scip\history.obj \
					$(LIBOBJDIR)\scip\implics.obj \
					$(LIBOBJDIR)\scip\interrupt.obj \
					$(LIBOBJDIR)\scip\intervalarith.obj \
					$(LIBOBJDIR)\scip\lp.obj \
					$(LIBOBJDIR)\scip\mem.obj \
					$(LIBOBJDIR)\scip\misc.obj \
					$(LIBOBJDIR)\scip\nlp.obj \
					$(LIBOBJDIR)\scip\nodesel.obj \
					$(LIBOBJDIR)\scip\paramset.obj \
					$(LIBOBJDIR)\scip\presol.obj \
					$(LIBOBJDIR)\scip\presolve.obj \
					$(LIBOBJDIR)\scip\pricestore.obj \
					$(LIBOBJDIR)\scip\pricer.obj \
					$(LIBOBJDIR)\scip\primal.obj \
					$(LIBOBJDIR)\scip\prob.obj \
					$(LIBOBJDIR)\scip\prop.obj \
					$(LIBOBJDIR)\scip\reader.obj \
					$(LIBOBJDIR)\scip\relax.obj \
					$(LIBOBJDIR)\scip\retcode.obj \
					$(LIBOBJDIR)\scip\scip.obj \
					$(LIBOBJDIR)\scip\scipdefplugins.obj \
					$(LIBOBJDIR)\scip\scipgithash.obj \
					$(LIBOBJDIR)\scip\scipshell.obj \
					$(LIBOBJDIR)\scip\sepa.obj \
					$(LIBOBJDIR)\scip\sepastore.obj \
					$(LIBOBJDIR)\scip\set.obj \
					$(LIBOBJDIR)\scip\sol.obj \
					$(LIBOBJDIR)\scip\solve.obj \
					$(LIBOBJDIR)\scip\stat.obj \
					$(LIBOBJDIR)\scip\tree.obj \
					$(LIBOBJDIR)\scip\var.obj \
					$(LIBOBJDIR)\scip\vbc.obj \
					$(LIBOBJDIR)\tclique\tclique_branch.obj \
					$(LIBOBJDIR)\tclique\tclique_coloring.obj \
					$(LIBOBJDIR)\tclique\tclique_graph.obj \
					$(LIBOBJDIR)\dijkstra\dijkstra.obj \
					$(LIBOBJDIR)\xml\xmlparse.obj \
					$(LIBOBJDIR)\objscip\objbranchrule.obj \
					$(LIBOBJDIR)\objscip\objconshdlr.obj \
					$(LIBOBJDIR)\objscip\objdialog.obj \
					$(LIBOBJDIR)\objscip\objdisp.obj \
					$(LIBOBJDIR)\objscip\objeventhdlr.obj \
					$(LIBOBJDIR)\objscip\objheur.obj \
					$(LIBOBJDIR)\objscip\objmessagehdlr.obj \
					$(LIBOBJDIR)\objscip\objnodesel.obj \
					$(LIBOBJDIR)\objscip\objpresol.obj \
					$(LIBOBJDIR)\objscip\objpricer.obj \
					$(LIBOBJDIR)\objscip\objprobdata.obj \
					$(LIBOBJDIR)\objscip\objprop.obj \
					$(LIBOBJDIR)\objscip\objreader.obj \
					$(LIBOBJDIR)\objscip\objrelax.obj \
					$(LIBOBJDIR)\objscip\objsepa.obj \
					$(LIBOBJDIR)\objscip\objvardata.obj

SCIPLIB			=	$(SCIPLIBNAME).$(BASE)
SCIPLIBFILE		=	$(LIBDIR)\lib$(SCIPLIB).lib
SCIPDLLFILE		=	$(LIBDIR)\$(SCIPLIB).$(LPS).$(LINKLIBEXT).dll
SCIPDLLLINKFILE	=	$(LIBDIR)\$(SCIPLIB).$(LPS).$(LINKLIBEXT).lib
SCIPDLLEXPFILE	=	$(LIBDIR)\$(SCIPLIB).$(LPS).$(LINKLIBEXT).exp

SCIPLIBOBJFILES	=	$(SCIPPLUGINLIBOBJ)
SCIPLIBDEP		=	$(SRCDIR)\depend.sciplib.$(OPT)

#-----------------------------------------------------------------------------
# Objective SCIP Library
#-----------------------------------------------------------------------------

#OBJSCIPLIBSHORTNAME=	objscip
#OBJSCIPLIBNAME	=	$(OBJSCIPLIBSHORTNAME)-$(VERSION)
#OBJSCIPLIBOBJ	=	$(LIBOBJDIR)\objscip\objbranchrule.obj \
#			$(LIBOBJDIR)\objscip\objconshdlr.obj \
#			$(LIBOBJDIR)\objscip\objdialog.obj \
#			$(LIBOBJDIR)\objscip\objdisp.obj \
#			$(LIBOBJDIR)\objscip\objeventhdlr.obj \
#			$(LIBOBJDIR)\objscip\objheur.obj \
#			$(LIBOBJDIR)\objscip\objmessagehdlr.obj \
#			$(LIBOBJDIR)\objscip\objnodesel.obj \
#			$(LIBOBJDIR)\objscip\objpresol.obj \
#			$(LIBOBJDIR)\objscip\objpricer.obj \
#			$(LIBOBJDIR)\objscip\objprobdata.obj \
#			$(LIBOBJDIR)\objscip\objprop.obj \
#			$(LIBOBJDIR)\objscip\objreader.obj \
#			$(LIBOBJDIR)\objscip\objrelax.obj \
#			$(LIBOBJDIR)\objscip\objsepa.obj \
#			$(LIBOBJDIR)\objscip\objvardata.obj
#
#OBJSCIPLIB	=	$(OBJSCIPLIBNAME).$(BASE)
#OBJSCIPLIBFILE	=	$(LIBDIR)\lib$(OBJSCIPLIB).$(L
#OBJSCIPLIBOBJFILES=	$(addprefix $(LIBOBJDIR)\,$(OBJSCIPLIBOBJ))
#OBJSCIPLIBSRC	=	$(addprefix $(SRCDIR)/,$(OBJSCIPLIBOBJ:.obj=.cpp))
#OBJSCIPINCSRC	=	$(addprefix $(SRCDIR)/,$(OBJSCIPLIBOBJ:.obj=.h))
#OBJSCIPLIBDEP	=	$(SRCDIR)/depend.objsciplib.$(OPT)
#OBJSCIPLIBLINK	=	$(LIBDIR)/lib$(OBJSCIPLIBSHORTNAME).$(BASE).$(LIBEXT)
#OBJSCIPLIBSHORTLINK=	$(LIBDIR)/lib$(OBJSCIPLIBSHORTNAME).$(LIBEXT)
#ALLSRC		+=	$(OBJSCIPLIBSRC)


#-----------------------------------------------------------------------------
# Main Program
#-----------------------------------------------------------------------------

MAINSHORTNAME	=	scip
MAINNAME		=	$(MAINSHORTNAME)-$(VERSION)

MAINOBJ			=	$(BINOBJDIR)\cppmain.obj
MAINDEP			=	$(SRCDIR)\depend.cppmain.$(OPT)

MAINFILE		=	$(BINDIR)\$(MAINNAME).$(BASE).$(LPS).$(LINK).exe
MAINOBJFILES	=	$(MAINOBJ)

#-----------------------------------------------------------------------------
# Rules
#-----------------------------------------------------------------------------

!if "$(VERBOSE)" != "true"
!CMDSWITCHES +S
!endif

all: 		$(MAINFILE) 

$(OBJDIR):	
		@-mkdir $(OBJDIR)

$(BINOBJDIR):	$(OBJDIR)
		@-mkdir $(BINOBJDIR)

$(LIBOBJDIR):	$(OBJDIR)
		@-mkdir $(LIBOBJDIR)

$(LIBOBJSUBDIRS):	$(LIBOBJDIR)
		@-mkdir $(LIBOBJDIR)\$@

$(LIBDIR):	
		@-mkdir $(LIBDIR)

$(BINDIR):	
		@-mkdir $(BINDIR)

clean:		$(LIBOBJSUBDIRS) $(LIBOBJDIR) $(BINOBJDIR) $(OBJDIR) $(LIBDIR) $(BINDIR)
		@echo "-> cleaning up"
		@-del /Q $(LIBOBJDIR)\blockmemshell\*.obj
		@-del /Q $(LIBOBJDIR)\scip\*.obj
		@-del /Q $(LIBOBJDIR)\objscip\*.obj      
		@-del /Q $(LIBOBJDIR)\tclique\*.obj
		@-del /Q $(LIBOBJDIR)\lpi\*.obj
		@-del /Q $(LIBOBJDIR)\nlpi\*.obj
		@-del /Q $(LIBOBJDIR)\xml\*.obj
		@-del /Q $(LIBOBJDIR)\dijkstra\*.obj
		@-del /Q $(BINOBJDIR)\*.obj
		@echo "-> remove library $(SCIPLIBFILE)"
		@-del $(SCIPLIBFILE) 
		@echo "-> remove library $(SCIPDLLFILE)"
		@-del $(SCIPDLLFILE) 
		@-del $(SCIPDLLLINKFILE) 
		@-del $(SCIPDLLEXPFILE) 
#		@echo "-> remove library $(OBJSCIPLIBFILE)"
#		@-del $(OBJSCIPLIBFILE) 
		@echo "-> remove library $(LPILIBFILE)"
		@-del $(LPILIBFILE) 
		@echo "-> remove library $(NLPILIBFILE)"
		@-del $(NLPILIBFILE) 
		@echo "-> remove binary $(MAINFILE)"
		@-del $(MAINFILE) 

!include	$(MAINDEP)
!include	$(SCIPLIBDEP)
#!include	$(OBJSCIPLIBDEP)
!include	$(LPILIBDEP)
!include	$(NLPILIBDEP)

!if "$(SHARED)" == "true"
$(MAINFILE):	$(BINDIR) $(BINOBJDIR) $(SCIPDLLFILE) $(MAINOBJFILES)
		@echo "-> linking $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(BINRTLFLAG) /Fe$@ $(MAINOBJFILES) $(SCIPDLLLINKFILE) 
		@echo "Finished"
!else
$(MAINFILE):	$(BINDIR) $(BINOBJDIR) $(SCIPLIBFILE) $(LPILIBFILE) $(NLPILIBFILE) $(MAINOBJFILES)
		@echo "-> linking $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(BINRTLFLAG) /Fe$@ $(MAINOBJFILES) $(SCIPLIBFILE) \
		$(LPILIBFILE) $(NLPILIBFILE) \
		$(LDFLAGS)
		@echo "Finished"
!endif

$(SCIPDLLFILE):	$(LIBDIR) $(LIBOBJSUBDIRS) $(SCIPLIBOBJFILES) $(LPILIBOBJFILES) $(NLPILIBFILE) 
		@echo "-> generating library $@"
		@-del $@
		@-del $(SCIPDLLLINKFILE)
		@-del $(SCIPDLLEXPFILE)
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBRTLFLAG) /Fe$@ \
		$(SCIPLIBOBJFILES) $(LPILIBOBJFILES) $(NLPILIBFILE) \
		$(LDFLAGS)

$(SCIPLIBFILE):	$(LIBDIR) $(LIBOBJSUBDIRS) $(SCIPLIBOBJFILES)
		@echo "-> generating library $@"
		-del $@
		$(AR) $(ARFLAGS) /OUT:$@ $(SCIPLIBOBJFILES)

#$(OBJSCIPLIBFILE):	$(LIBOBJSUBDIRS) $(LIBDIR) $(OBJSCIPLIBOBJFILES) 
#		@echo "-> generating library $@"
#		-rm -f $@
#		$(LIBBUILD) $(LIBBUILDFLAGS) $(LIBBUILD_o)$@ $(OBJSCIPLIBOBJFILES) 

$(LPILIBFILE):	$(LIBOBJSUBDIRS) $(LIBDIR) $(LPILIBOBJFILES)
		@echo "-> generating library $@"
		-del $@
		$(AR) $(ARFLAGS) /OUT:$@ $(LPILIBOBJFILES)

$(NLPILIBFILE):	$(LIBOBJSUBDIRS) $(LIBDIR) $(NLPILIBOBJFILES) $(NLPILIBSCIPOBJFILES) 
		@echo "-> generating library $@"
		-del $@
		$(AR) $(ARFLAGS) /OUT:$@ $(NLPILIBOBJFILES) $(NLPILIBSCIPOBJFILES) 

{$(SRCDIR)}.c{$(BINOBJDIR)}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(BINRTLFLAG) /c $< /Fo$@

{$(SRCDIR)}.cpp{$(BINOBJDIR)}.obj:
		@echo "-> compiling $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(BINRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\scip}.c{$(LIBOBJDIR)\scip}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\scip}.cpp{$(LIBOBJDIR)\scip}.obj:
		@echo "-> compiling $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\objscip}.cpp{$(LIBOBJDIR)\objscip}.obj:
		@echo "-> compiling $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\xml}.c{$(LIBOBJDIR)\xml}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\tclique}.c{$(LIBOBJDIR)\tclique}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\dijkstra}.c{$(LIBOBJDIR)\dijkstra}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\blockmemshell}.c{$(LIBOBJDIR)\blockmemshell}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\lpi}.c{$(LIBOBJDIR)\lpi}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\lpi}.cpp{$(LIBOBJDIR)\lpi}.obj:
		@echo "-> compiling $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\nlpi}.c{$(LIBOBJDIR)\nlpi}.obj:
		@echo "-> compiling $@"
		$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

{$(SRCDIR)\nlpi}.cpp{$(LIBOBJDIR)\nlpi}.obj:
		@echo "-> compiling $@"
		$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(LIBRTLFLAG) /c $< /Fo$@

#{$(SRCDIR)}.cpp{$(LIBOBJDIR)}.obj:
#		@echo "-> compiling $@"
#		$(CXX) $(FLAGS) $(OFLAGS) $(LIBOFLAGS) $(CXXFLAGS) $(CXX_c) $< $(CXX_o)$@


# --- EOF ---------------------------------------------------------------------
# DO NOT DELETE
